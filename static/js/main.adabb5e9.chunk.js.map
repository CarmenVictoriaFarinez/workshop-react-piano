{"version":3,"sources":["notas/do.wav","notas/re.wav","notas/mi.wav","notas/fa.wav","notas/sol.wav","notas/la.wav","notas/si.wav","key.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Key","estaSonando","nota","handleClick","className","nombre","onClick","tieneSostenido","notas","link","require","App","useState","setEstaSonando","Audio","play","console","log","setTimeout","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oLAAAA,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,sFCe5BC,G,MAbH,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,YACjC,OACI,yBACAC,UAAS,eAAUH,IAAgBC,EAAKG,QAAU,SAClDC,QAAU,kBAAMH,EAAYD,KAE1BA,EAAKK,gBAAkB,yBAAKH,UAAU,aCJpCI,EAAQ,CACZ,CACEH,OAAQ,KACRI,KAAMC,EAAQ,IACdH,gBAAgB,GAElB,CACEF,OAAQ,KACRI,KAAMC,EAAQ,IACdH,gBAAgB,GAElB,CACEF,OAAQ,KACRI,KAAMC,EAAQ,KAEhB,CACEL,OAAQ,KACRI,KAAMC,EAAQ,IACdH,gBAAgB,GAElB,CACEF,OAAQ,MACRI,KAAMC,EAAQ,IACdH,gBAAgB,GAElB,CACEF,OAAQ,KACRI,KAAMC,EAAQ,IACdH,gBAAgB,GAElB,CACEF,OAAQ,KACRI,KAAMC,EAAQ,MAqCLC,MAjCb,WAAgB,IAAD,EACuBC,mBAAS,MADhC,mBACRX,EADQ,KACKY,EADL,KAGTV,EAAc,SAACD,GACnBW,EAAeX,EAAKG,QACL,IAAIS,MAAMZ,EAAKO,MACvBM,OACPC,QAAQC,IAAIf,EAAKG,QACjBa,YAAW,WACTL,EAAe,QACd,MAGL,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,UACb,+CACA,qFACA,yBAAKA,UAAU,gBACdH,GAAW,gBAAaA,IAEzB,yBAAKG,UAAU,cACZI,EAAMW,KAAI,SAACjB,EAAMkB,GAAP,OACX,kBAAC,EAAD,CAAKC,IAAKD,EAAEnB,YAAaA,EAAaC,KAAMA,EAAMC,YAAaA,WCnDrDmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.adabb5e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/do.18fd3f6f.wav\";","module.exports = __webpack_public_path__ + \"static/media/re.217b943a.wav\";","module.exports = __webpack_public_path__ + \"static/media/mi.1f26c778.wav\";","module.exports = __webpack_public_path__ + \"static/media/fa.a787534a.wav\";","module.exports = __webpack_public_path__ + \"static/media/sol.785a33d2.wav\";","module.exports = __webpack_public_path__ + \"static/media/la.10af03f3.wav\";","module.exports = __webpack_public_path__ + \"static/media/si.70924435.wav\";","import React from \"react\";\n\nconst Key = ({estaSonando, nota, handleClick}) => {\nreturn (\n    <div \n    className={`nota ${estaSonando === nota.nombre && 'suena'}`} \n    onClick ={() => handleClick(nota)}\n    >\n     {nota.tieneSostenido && <div className=\"negra\"></div>}\n    </div>\n\n);\n\n};\n\nexport default Key;","import React, { useState } from 'react';\nimport './App.css';\nimport Key from './key';\n\n  const notas = [\n    {\n      nombre: \"DO\",\n      link: require(\"./notas/do.wav\"),\n      tieneSostenido: true\n    },\n    {\n      nombre: \"RE\",\n      link: require(\"./notas/re.wav\"),\n      tieneSostenido: true\n    },\n    {\n      nombre: \"MI\",\n      link: require(\"./notas/mi.wav\")\n    },\n    {\n      nombre: \"FA\",\n      link: require(\"./notas/fa.wav\"),\n      tieneSostenido: true\n    },\n    {\n      nombre: \"SOL\",\n      link: require(\"./notas/sol.wav\"),\n      tieneSostenido: true\n    },\n    {\n      nombre: \"LA\",\n      link: require(\"./notas/la.wav\"),\n      tieneSostenido: true\n    },\n    {\n      nombre: \"SI\",\n      link: require(\"./notas/si.wav\")\n    }\n  ];\n  \n  function App() {\n  const [estaSonando, setEstaSonando] = useState(null);\n  \n  const handleClick = (nota) => {\n    setEstaSonando(nota.nombre);\n    const sonido = new Audio(nota.link);\n    sonido.play();\n    console.log(nota.nombre);\n    setTimeout(() => {\n      setEstaSonando(null)\n    }, 150);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"titulo\">\n        <h1>Piano con React</h1>\n        <h2>Hecho con ❤️ por Carmen Victoria Fariñez</h2>\n        <div className=\"esta-sonando\">\n        {estaSonando && `suena ${estaSonando}`}\n        </div>\n        <div className=\"contenedor\">\n          {notas.map((nota, i) => (\n          <Key key={i}estaSonando={estaSonando} nota={nota} handleClick={handleClick}></Key>\n          ))}\n         \n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}